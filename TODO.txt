export class IterableWeakMap {
  constructor(seed) {
    this.seed = seed;
    this._wm = Array.isArray(seed) ? new WeakMap(seed) : new WeakMap();
    this.index = Array.isArray(seed) ? seed.map(_ => _[0]) : [];
    this._size = this.index.length || 0;
  
    console.log(this);
  }

  forEach(func) {
   console.log({func});
    for (let i = 0; i < this.size; i++) {
      const item = this.index[i];
      if (this.has(item)) {
        func(this.get(item), item, this._wm )
      }
    }
  }

  clear() {
    this.index = [];
    this.size = 0
    this._wm = new WeakMap();
  }

  delete(key) {
    this.index = this.index.filter((k, i) => !(k === key));
    this.size = this.size - 1
    return this._wm.delete(key);
  }

  get(k) {
    return this._wm.get(k);
  }

  has(k) {
    return this._wm.has(k);
  }

  set(k, v) {
    this.index = [...this.index, k];
    this.size = this.size + 1
    this._wm.set(k, v);
    return this;
  }

  get size() {
    return this._size;
  }

  set size(newValue) {
    this._size = newValue;
  }
}


DOM MAPPER:

  const getAttributes = (attributes)=>{
    return Array.prototype.map.call(attributes, function(attribute) {
      return {
        att: attribute.name,
        value: attribute.value
      };
    });
  };
  
  const createDOMMap = (element, isSVG) =>{
    return Array.prototype.map.call(element.childNodes, (function(node) {
      var details = {
        content: node.childNodes && node.childNodes.length > 0 ? null : node.textContent,
        atts: node.nodeType !== 1 ? [] : getAttributes(node.attributes),
        type: node.nodeType === 3 ? 'text' : (node.nodeType === 8 ? 'comment' : node.tagName.toLowerCase()),
        node: node
      };
      details.objectType = document.createElement('div').nodeName
      details.isSVG = isSVG || details.type === 'svg';
      details.children = createDOMMap(node, details.isSVG);
      return details;
    }));
  };



/ARRAY METHODS:

  Distinct: Reduce using includes on the acc
  
  Repeat: Repeat a pattern for drfined # of times
  
  RemoveMatchingItems:
  Create a list from {1, 2, 3, 4, 5, 5} without {1, 5}.
  List.RemoveMatchingItems({1, 2, 3, 4, 5, 5}, {1, 5})
  
  List.ReplaceMatchingItems(list as list, replacements as list, optional equationCriteria as any) as list 
  Performs the given replacements to the list list. A replacement operation replacements consists of a list of two values, the old value and new value, provided in a list. An optional equation criteria value, equationCriteria, can be specified to control equality testing.
  
  
  List.Difference(list1 as list, list2 as list, optional equationCriteria as any) as list
  Returns array of items in list1 not in list2. Duplicates supported.
  
  List.Intersect(lists as list, optional equationCriteria as any) as list 
  Returns the intersection of the list values found in the input list lists. 
  An optional parameter, equationCriteria, can be specified.
  
  EXAMPLE 1
  Find the intersection of 
  {1..5}, {2..6}, {3..7}.
  
  List.Intersect({{1..5}, {2..6}, {3..7}})
  => 3, 4, 5